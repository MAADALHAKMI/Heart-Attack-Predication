# استيراد المكتبات اللازمة
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report

# دالة لتحميل البيانات
def load_data(file_path):
    data = pd.read_csv(file_path)
    X = data.drop('output', axis=1)  # الميزات
    y = data['output']               # التصنيف المستهدف
    return X, y

# دالة لتقسيم البيانات وتوحيدها
def preprocess_data(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    return X_train, X_test, y_train, y_test, scaler

# دالة لبناء النموذج
def build_model(input_shape):
    model = tf.keras.models.Sequential([
        tf.keras.layers.Dense(32, activation='relu', input_shape=(input_shape,)),  # الطبقة المخفية الأولى
        tf.keras.layers.Dense(16, activation='relu'),  # الطبقة المخفية الثانية
        tf.keras.layers.Dense(1, activation='sigmoid')  # طبقة الإخراج
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# دالة لتدريب النموذج
def train_model(model, X_train, y_train):
    history = model.fit(X_train, y_train, epochs=100, batch_size=8, validation_split=0.1, verbose=1)
    return history

# دالة لاختبار النموذج
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    y_pred = [1 if i > 0.5 else 0 for i in y_pred]  # تحويل الاحتمالات إلى تصنيفات (0 أو 1)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"\nAccuracy on test data: {accuracy:.2f}")
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

# دالة لاختبار النموذج على بيانات جديدة
def predict_new_data(model, scaler, new_data):
    new_data = scaler.transform(new_data)  # تطبيق التحويل القياسي على البيانات الجديدة
    prediction = model.predict(new_data)
    return "Likely to have heart disease" if prediction > 0.5 else "Unlikely to have heart disease"

# المسار إلى الملف
file_path = r"C:\Users\pc1\Documents\Python Scripts\heart.csv"

# تحميل البيانات
X, y = load_data(file_path)

# معالجة البيانات
X_train, X_test, y_train, y_test, scaler = preprocess_data(X, y)

# بناء النموذج
model = build_model(X_train.shape[1])

# تدريب النموذج
history = train_model(model, X_train, y_train)

# عرض ملخص عملية التعلم
print("\nTraining Summary:")
for i in range(len(history.history['accuracy'])):
    print(f"Epoch {i+1}: Train Accuracy={history.history['accuracy'][i]:.2f}, Validation Accuracy={history.history['val_accuracy'][i]:.2f}")

# تقييم النموذج
evaluate_model(model, X_test, y_test)

# اختبار النموذج على بيانات جديدة (يمكنك تعديل القيم أدناه لتجربة بيانات جديدة)
new_data = [[52, 1, 0, 125, 212, 0, 1, 168, 0, 1.0, 1, 2, 2]]
result = predict_new_data(model, scaler, new_data)
print("\nNew data prediction:", result)



















import numpy as np

# عرض تعليمات الإدخال
print("يرجى إدخال القيم التالية لتشخيص احتمالية الإصابة بالنوبة القلبية:")
print("التعليمات: تأكد من إدخال القيم بنفس الصيغة المتوفرة في ملف heart.csv")

# جمع إدخالات المستخدم
age = float(input("العمر (مثال: 63): "))
sex = int(input("الجنس (0 للإناث، 1 للذكور): "))
cp = int(input("نوع ألم الصدر (0: لا يوجد، 1-3: درجات مختلفة لألم الصدر): "))
trestbps = float(input("ضغط الدم عند الراحة (ملم زئبق، مثال: 145): "))
chol = float(input("مستوى الكولسترول (ملجم/دل، مثال: 233): "))
fbs = int(input("سكر الدم الصائم > 120 ملجم/دل (1 إذا كان صحيح، 0 إذا كان غير صحيح): "))
restecg = int(input("نتائج ECG عند الراحة (0-2): "))
thalach = float(input("أقصى معدل لضربات القلب أثناء التمرين (مثال: 150): "))
exang = int(input("الذبحة الصدرية المستحثة بالتمرين (1: نعم، 0: لا): "))
oldpeak = float(input("معدل انخفاض ST بعد التمرين (مثال: 2.3): "))
slope = int(input("ميل قطاعات ST (0-2): "))
ca = int(input("عدد الأوعية الملونة بالفلوورسكوب (0-3): "))
thal = int(input("العيوب التالوية (1، 2 أو 3): "))

# تحويل إدخالات المستخدم إلى تنسيق numpy array لاستخدامها في النموذج
new_data = np.array([[age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]])

# التنبؤ باستخدام النموذج المدرب
prediction = model.predict(new_data)

# عرض نتيجة التنبؤ
if prediction[0] >= 0.5:
    print("التشخيص: قد يكون عرضة للنوبة القلبية.")
else:
    print("التشخيص: غير محتمل أن يكون عرضة للنوبة القلبية.")
